# -*- coding: utf-8 -*-
"""Iris_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OppDaAvIlpfERIKvSztNjHiFEFAK8u5k

# **Iris Flower classification using ML**

**About the Project**

Classifying the Iris Flower dataset according to its species with the help of sepal and petal length and width.

**Input:-**

Sepal Length, Sepal Width, Petal Length and Petal Width.

**Output:-**

Classified classes of iris dataset.

**Aim**

To classify the Iris Flowers into three species(Setosa, Versicolor, and Virginica) according to it's Sepal and Petal Length and Width.

The iris dataset contains 150 datas, divided into 3 class of species, 50 instances in each. The main aim is to develop a Machine Learning Model which helps to perform the classification of the species of the iris flower set according to its sepal and petal length and width. This model will help in segregating the new iris flower data to it's species. It contains the iris flower dataset as the training set and it is in the form of .csv file. The .csv file containing the new iris flower set data will be the testing set.

**Importing Libraries in Python**
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

"""**Load the Dataset**"""

data = pd.read_csv(r"/Iris.csv")
data.head()

"""**Visualization of the Dataset**"""

data.shape

data.describe()

sns.pairplot(data,hue="Species")

data.info()

"""**Preprocess the data**"""

X = data.drop('Species', axis=1)  # Features (measurements)
y = data['Species']  # Labels

"""**Split the data into training and testing sets**"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# **Model 1: Support Vector Classifier (SVC) Model**

**Train the SVC Model**
"""

model = SVC(kernel='linear')  # Linear kernel is a good choice for this dataset
model.fit(X_train, y_train)

"""**Model Evaluation**"""

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""**Print Classification Report**"""

print(classification_report(y_test, y_pred))

"""# Model 2: Logistic Regresion Model

**Importing Libraries for Logistic Regression Model**
"""

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression

"""**Feature Scaling**"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""**Train the Logistic Regression Model**"""

model = LogisticRegression(max_iter=1000, multi_class='ovr')  # 'ovr' for multiclass problem
model.fit(X_train_scaled, y_train)

"""**Make Predictions**"""

y_pred = model.predict(X_test_scaled)

"""**Evaluate the Model**"""

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

"""**Print Classification Report**"""

print(classification_report(y_test, y_pred))

"""# **Model 3: Decision Tree Classifier Model**

**Importing Libraries for Decision Tree Classifier Model**
"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, confusion_matrix

"""**Train Decision Tree Model**"""

model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

"""**Make Predictions**"""

y_pred = model.predict(X_test)

"""**Evaluate Decision Tree Classifier Model**"""

print(confusion_matrix(y_test, y_pred))

"""**Print Classification Report**"""

print(classification_report(y_test, y_pred))